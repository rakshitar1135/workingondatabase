{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rajus\\\\Desktop\\\\workingondatabase\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport AddMovie from \"./components/AddMovie\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  /*useEffect(() => {\n      const timer = setInterval(fetchMoviesHandler(), 5000);\n      return () => clearInterval(timer);\n    }, [error]);*/\n\n  const cancelRetryHandler = () => {\n    setError(error.message);\n  };\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\"https://helical-land-343114-default-rtdb.firebaseio.com/movies.json\");\n      if (!response.ok) {\n        throw new Error(\"Something went wrong... Retrying\");\n      }\n      const data = await response.json();\n      const loadedMovies = [];\n      for (const key in data) {\n        loadedMovies.push({\n          id: key,\n          title: data[key]\n        });\n      }\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      setMovies(transformedMovies);\n      setIsLoading(false);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n  function addMovieHandler(movie) {\n    fetch('https://helical-land-343114-default-rtdb.firebaseio.com/movies.json', {\n      method: 'POST',\n      body: JSON.stringify(movie),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \" Found no movies \"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 17\n  }, this);\n  if (movies.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(MoviesList, {\n      movies: movies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }, this);\n  }\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" Loading.....\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 15\n    }, this);\n  }\n  if (error) {\n    content = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", error, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: cancelRetryHandler,\n        children: \" Cancel Retry \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(AddMovie, {\n        onAddMovie: addMovieHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchMoviesHandler,\n        children: \"Fetch Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"/djrXmupudGJZ4TEuxAjJK8qFwI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","MoviesList","AddMovie","App","movies","setMovies","isLoading","setIsLoading","error","setError","cancelRetryHandler","message","fetchMoviesHandler","response","fetch","ok","Error","data","json","loadedMovies","key","push","id","title","transformedMovies","results","map","movieData","episode_id","openingText","opening_crawl","releaseDate","release_date","addMovieHandler","movie","method","body","JSON","stringify","headers","content","length"],"sources":["C:/Users/rajus/Desktop/workingondatabase/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport AddMovie from \"./components/AddMovie\";\nimport \"./App.css\";\n\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  /*useEffect(() => {\n      const timer = setInterval(fetchMoviesHandler(), 5000);\n      return () => clearInterval(timer);\n    }, [error]);*/\n\n  const cancelRetryHandler = () => {\n    setError(error.message);\n  };\n\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\"https://helical-land-343114-default-rtdb.firebaseio.com/movies.json\");\n      if (!response.ok) {\n        throw new Error(\"Something went wrong... Retrying\");\n      }\n      const data = await response.json();\n     const loadedMovies=[]\n     for(const key in data){\n      loadedMovies.push({\n        id:key,\n        title:data[key]\n      })\n     }\n      const transformedMovies = data.results.map((movieData) => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date,\n        };\n      });\n      setMovies(transformedMovies);\n      setIsLoading(false);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  function addMovieHandler(movie) {\n    fetch('https://helical-land-343114-default-rtdb.firebaseio.com/movies.json',{\n      method:'POST',\n      body:JSON.stringify(movie),\n      headers:{\n        'Content-Type':'application/json'\n      }\n    })\n  }\n\n  let content = <p> Found no movies </p>;\n\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n  }\n\n  if (isLoading) {\n    content = <p> Loading.....</p>;\n  }\n\n  if (error) {\n    content = (\n      <div>\n        <p> {error} </p>\n        <button onClick={cancelRetryHandler}> Cancel Retry </button>\n      </div>\n    );\n  }\n  return (\n    <React.Fragment>\n      <section>\n        <AddMovie onAddMovie= {addMovieHandler}/>\n      </section>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>{content}</section>\n    </React.Fragment>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}